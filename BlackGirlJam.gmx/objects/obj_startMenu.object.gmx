<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pointer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set initial variables.

//originally this added a specific font from a spriteset
//we will make it gt the value of the textbox font we want to use as default instead
//global.fnt_textbox=font_add_sprite(spr_fontmain,ord(" "),1,1);
/*global.fnt_textbox=fnt_wizardsManse20;*/

// The following stores the icons for the start menu!
// Move is an array of menu options, move[i] is the ith location in the array.
menu[0] = "Press Enter to Begin";
menu[1] = "Credits";
menu[2] = "Exit Game";

// Declare the amount of vertical space between menu items.
//vertSpace = 50;
space = 80;

//Declare the initial menu/curor position
mpos = 0;

// Declare the index within the move array where the cursor should be.
cursorPos = 0; // move[cursorPos] returns the item the cursor is pointing to.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Code to move up and down the menu.

//How to move about the menu
var move = 0;
move -= max(keyboard_check_released(vk_up), keyboard_check_pressed(ord("W")), 0); 
move += max(keyboard_check_released(vk_down), keyboard_check_pressed(ord("S")), 0);
    
//Make sure we stay within length of menu
if (move != 0) {

    mpos += move;
    if (mpos &lt; 0) mpos = array_length_1d(menu) -1;
    if (mpos &gt; array_length_1d(menu) -1) mpos = 0;
}    

//How to select on the menu
var push;
push = max(keyboard_check_released(vk_enter), keyboard_check_released(vk_space), 0);
if (push == 1) scr_startMenu();

/*
//if(state_stepFuncOK(global.state)) {
    var select;
    select = max(keyboard_check_released(vk_enter), 0);

    if (select == 1) { 
       scr_startMenu(); 
       //state_setNextState(state_stateMachineHandler, GAME_STATE.IDLE); 
    }
//}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the start menu

//Basic appearance of the menu
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(fntInfo);
draw_set_color(c_white);

//Make the menu text show with proper spacing
var m;
for (m = 0; m &lt; array_length_1d(menu); m += 1)
{
    draw_text(x + space, y + (m * space), string(menu[m]))
}

//What sprite will show
draw_sprite(sprite_index, 0, x + 16, y + mpos * space);

/*draw_set_color(c_purple);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
//draw_set_font(fnt_codersCrux);
//draw_set_color(c_white);

draw_text(x + 16 + vertSpace, y, string(menu[0]));

draw_sprite(sprite_index, 0, x + 16, y - 16 + (cursorPos * vertSpace)); */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
